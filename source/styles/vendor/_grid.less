/*!
 *  grid.less
 *  Grid system is modified from Twitter Bootstrap
 *  Bootstrap is released under the MIT license and is copyright 2014 Twitter
 */

@import (reference) "../reference/_variables.less";

//
// Grid system
// --------------------------------------------------
.clearfix {
	&:before,
	&:after {
		content: " "; // 1
		display: table; // 2
	}

	&:after {
		clear: both;
	}

	zoom: 1;
}


// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.
.container,
.container-fluid {
	.container-fixed();

	@media @media-screen-sm {
		width: @container-sm;
	}

	@media @media-screen-md {
		width: @container-md;
	}

	@media @media-screen-lg {
		width: @container-lg;
	}
}


// Row
//
// Rows contain and clear the floats of your columns.
.@{prefix}row {
	.make-row(0);

	@media @media-screen-sm {
		.make-row(@grid-gutter-sm-width);
	}

	@media @media-screen-md {
		.make-row(@grid-gutter-md-width);
	}

	@media @media-screen-lg {
		.make-row(@grid-gutter-lg-width);
	}
}


// Columns
//
// Common styles for small and large grid columns
.make-grid-columns();


// Extra small grid
//
// Columns, offsets, pushes, and pulls for extra small devices like
// smartphones.
.make-grid(xs, @grid-gutter-xs-width);


// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.
@media @media-screen-sm {
	.make-grid(sm, @grid-gutter-sm-width);
}


// Medium grid
//
// Columns, offsets, pushes, and pulls for the desktop device range.
@media @media-screen-md {
	.make-grid(md, @grid-gutter-md-width);
}


// Large grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.
@media @media-screen-lg {
	.make-grid(lg, @grid-gutter-lg-width);
}


// Grid System
// -----------

// Centered container element
.container-fixed() {
	margin-right: auto;
	margin-left: auto;
	&:extend(.clearfix all);
	padding-left:  (@grid-gutter-xs-width / 2);
	padding-right: (@grid-gutter-xs-width / 2);

	@media @media-screen-sm {
		padding-left:  (@grid-gutter-sm-width / 2);
		padding-right: (@grid-gutter-sm-width / 2);
	}

	@media @media-screen-md {
		padding-left:  (@grid-gutter-md-width / 2);
		padding-right: (@grid-gutter-md-width / 2);
	}

	@media @media-screen-lg {
		padding-left:  (@grid-gutter-lg-width / 2);
		padding-right: (@grid-gutter-lg-width / 2);
	}
}


// Creates a wrapper for a series of columns
.make-row(@gutter: @grid-gutter-width) {
	margin-left:  (@gutter / -2);
	margin-right: (@gutter / -2);
	&:extend(.clearfix all);
}


// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `@grid-columns`.
.make-grid-columns() {
	// Common styles for all sizes of grid columns, widths 1-12
	.col(@index) when (@index = 1) { // initial
		@item: ~".@{prefix}col-xs-@{index}, .@{prefix}col-sm-@{index}, .@{prefix}col-md-@{index}, .@{prefix}col-lg-@{index}";
		.col((@index + 1), @item);
	}

	.col(@index, @list) when (@index =< @grid-columns) { // general; "=<" isn't a typo
		@item: ~".@{prefix}col-xs-@{index}, .@{prefix}col-sm-@{index}, .@{prefix}col-md-@{index}, .@{prefix}col-lg-@{index}";
		.col((@index + 1), ~"@{list}, @{item}");
	}

	.col(@index, @list) when (@index > @grid-columns) { // terminal
		@{list} {
			box-sizing: border-box;
			position: relative;
			// Prevent columns from collapsing when empty
			min-height: 1px;

			padding-left:  (@grid-gutter-xs-width / 2);
			padding-right: (@grid-gutter-xs-width / 2);

			@media @media-screen-sm {
				padding-left:  (@grid-gutter-sm-width / 2);
				padding-right: (@grid-gutter-sm-width / 2);
			}

			@media @media-screen-md {
				padding-left:  (@grid-gutter-md-width / 2);
				padding-right: (@grid-gutter-md-width / 2);
			}

			@media @media-screen-lg {
				padding-left:  (@grid-gutter-lg-width / 2);
				padding-right: (@grid-gutter-lg-width / 2);
			}
		}
	}

	.col(1); // kickstart it
}

.float-grid-columns(@class) {
	.col(@index) when (@index = 1) { // initial
		@item: ~".@{prefix}col-@{class}-@{index}";
		.col((@index + 1), @item);
	}

	.col(@index, @list) when (@index =< @grid-columns) { // general
		@item: ~".@{prefix}col-@{class}-@{index}";
		.col((@index + 1), ~"@{list}, @{item}");
	}

	.col(@index, @list) when (@index > @grid-columns) { // terminal
		@{list} {
			float: left;
		}
	}

	.col(1); // kickstart it
}

.calc-grid-column(@index, @class, @gutter, @type) when (@type = width) and (@index > 0) {
	.@{prefix}col-@{class}-@{index} {
		width: percentage((@index / @grid-columns));
	}
}

.calc-grid-column(@index, @class, @gutter, @type) when (@type = push) {
	.@{prefix}col-@{class}-push-@{index} {
		left: percentage((@index / @grid-columns));
	}
}

.calc-grid-column(@index, @class, @gutter, @type) when (@type = pull) {
	.@{prefix}col-@{class}-pull-@{index} {
		right: percentage((@index / @grid-columns));
	}
}

.calc-grid-column(@index, @class, @gutter, @type) when (@type = offset) {
	.@{prefix}col-@{class}-offset-@{index} {
		margin-left: percentage((@index / @grid-columns));
	}
}

// Basic looping in LESS
.loop-grid-columns(@index, @class, @gutter, @type) when (@index >= 0) {
	.calc-grid-column(@index, @class, @gutter, @type);
	// next iteration
	.loop-grid-columns((@index - 1), @class, @gutter, @type);
}

// Create grid for specific class
.make-grid(@class, @gutter) {
	.float-grid-columns(@class);
	.loop-grid-columns(@grid-columns, @class, @gutter, width);
	.loop-grid-columns(@grid-columns, @class, @gutter, pull);
	.loop-grid-columns(@grid-columns, @class, @gutter, push);
	.loop-grid-columns(@grid-columns, @class, @gutter, offset);
}
