//
// reference/_mixins.less
//

//
// Arrows
//
.content() {
	content: "";
	display: block;
	position: absolute;
}

.arrow-right(@size, @color) {
	border-bottom: @size solid transparent;
	border-left: @size solid @color;
	border-top: @size solid transparent;
	.content();
}

.arrow-left(@size, @color) {
	border-bottom: @size solid transparent;
	border-right: @size solid @color;
	border-top: @size solid transparent;
	.content();
}

.arrow-up(@size, @color) {
	border-bottom: @size solid @color;
	border-left: @size solid transparent;
	border-right: @size solid transparent;
	.content();
}

.arrow-down(@size, @color) {
	border-left: @size solid transparent;
	border-right: @size solid transparent;
	border-top: @size solid @color;
	.content();
}


//
// background-image A background image mixin for high resolution images.
//
// @param {string} @file-name The file name of the background-image, including extension.
// @param {px} @width A pixel width of the original background image.
// @param {px} @height A pixel height of the original background image.
// @param {keyword} @repeat A repeat keyword.
// @param {px} @posx The background position x in pixels.
// @param {px} @posy The background position y in pixels.
//
.background-image(@file-name, @width, @height, @repeat: no-repeat, @posx: 0, @posy: 0) {
	@filename:  ~`/(.*)\.(jpg|jpeg|png|gif|webp)/.exec(@{file-name})[1]`;
	@extension: ~`/(.*)\.(jpg|jpeg|png|gif|webp)/.exec(@{file-name})[2]`;
	background-image: url("@{url-project-images}/@{filename}.@{extension}");
	background-repeat: @repeat;

	& when not (@posx = 0), not (@posy = 0) {
		background-position: @posx @posy;
	}

	// Need to use all three resolutions since media query bubbling doesn't seem to work with string interpolation
	// @media @media-hdpi
	@media (-webkit-min-device-pixel-ratio: @screen-resolution-hdpi),
		   (min-resolution: (@screen-resolution-hdpi * 100dpi)),
		   (min-resolution: (@screen-resolution-hdpi * 1dppx)) {
		background-image: url("@{url-project-images}/@{filename}-2x.@{extension}");
		background-size: @width @height;
	}
}


//
//
// background-image-base64 A background image mixin for high resolution images that base64 encodes
// the file
//
// @param {string} @file-name The file name of the background-image, including extension.
// @param {px} @width A pixel width of the original background image.
// @param {px} @height A pixel height of the original background image.
// @param {keyword} @repeat A repeat keyword.
// @param {px} @posx The background position x in pixels.
// @param {px} @posy The background position y in pixels.
//
.background-image-base64(@file-name, @width, @height, @repeat: no-repeat, @posx: 0, @posy: 0) {
	@filename:  ~`/(.*)\.(jpg|jpeg|png|gif|webp)/.exec(@{file-name})[1]`;
	@extension: ~`/(.*)\.(jpg|jpeg|png|gif|webp)/.exec(@{file-name})[2]`;
	background: data-uri("@{url-project-images}/@{filename}") @repeat;
	background-repeat: @repeat;

	& when not (@posx = 0), not (@posy = 0) {
		background-position: @posx @posy;
	}

	// Need to use all three resolutions since media query bubbling doesn't seem to work with string interpolation
	// @media @media-hdpi
	@media (-webkit-min-device-pixel-ratio: @screen-resolution-hdpi),
		   (min-resolution: (@screen-resolution-hdpi * 100dpi)),
		   (min-resolution: (@screen-resolution-hdpi * 1dppx)) {
		background-image: data-uri("@{url-project-images}/@{filename}@2x.@{extension}");
		background-size: @width @height;
	}
}


//
// clean-list Removes bullets and white-space from lists
//
.clean-list() {
	list-style: none;
	margin: 0;
	padding: 0;
}


//
// clear-fix Forces elements to contain float child elements
//
.clear-fix() {
	&:before,
	&:after {
		content: " ";
		display: table;
	}

	&:after {
		clear: both;
	}

	zoom: 1;
}


//
// display-inline-block Inline-block with IE7 fallback
//
.display-inline-block() {
	display: inline-block;
	*display: inline;
}


//
// image-replacement
//
.image-replacement() {
	display: block;
	border: 0;
	overflow: hidden;
	text-indent: -9999px;
}


//
// Linear Gradients
//
.vertical-gradient(@start, @end) {
	background-color: mix(@start, @end);
	background-image: linear-gradient(to bottom, @start, @end);
}

.horizontal-gradient(@start, @end) {
	background-color: mix(@start, @end);
	background-image: linear-gradient(to right, @start, @end);
}


//
// list-properties Create CSS class corresponding to CSS properties
//
.list-properties(@property, @list, @index: length(@list)) when (@index > 0) {
	.list-properties(@property, @list, (@index - 1));

	@value: extract(@list, @index);

	&-@{value} {
		@{property}: @value;
	}
}


//
// position-absolute-all Take up all space within its non-static positioned ancestor
//
.position-absolute-all(@area: 0) {
	bottom: @area;
	left: @area;
	right: @area;
	top: @area;
}


//
// sr-only Screen-reader only
//
.sr-only() {
	position: absolute;
	width: 1px;
	height: 1px;
	margin: -1px;
	padding: 0;
	overflow: hidden;
	clip: rect(0,0,0,0);
	border: 0;
}


//
// Sprites
//
.sprite() {
	background-image: url(@sprite-url);
	background-repeat: no-repeat;

	// Need to use all three resolutions since media query bubbling doesn't seem to work with string interpolation
	// @media @media-hdpi
	@media (-webkit-min-device-pixel-ratio: @screen-resolution-hdpi),
		   (min-resolution: (@screen-resolution-hdpi * 100dpi)),
		   (min-resolution: (@screen-resolution-hdpi * 1dppx)) {
		.retina-sprite();
	}
}

.sprite-position(@x, @y) {
	background-position: (-(@x - 1)*@sprite-column-width) (-(@y - 1)*@sprite-column-width);
}

.sprite(@x, @y) {
	.sprite();
	.sprite-position(@x, @y);
}

.sprite(@x, @y, @width, @height, @url: @sprite-url) {
	.sprite(@x, @y);
	height: @height;
	width: @width;
}

.retina-sprite() {
	background-image: url(@sprite-2x-url);
	background-size: @sprite-size;
}

//
// transition A basic transition
//
.transition() {
	.transition(all 0.2s linear)
}
